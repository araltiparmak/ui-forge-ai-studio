name: Build and Deploy

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: 22
  AWS_REGION: eu-central-1
  PROJECT_NAME: ui-studio
  BUCKET_NAME: ui-studio

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    permissions:
      id-token: write # This is required for aws oidc connection

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Enable Corepack
        run: corepack enable

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "yarn"

      - run: yarn install
      - run: yarn format:check
      - run: yarn lint
      - run: yarn build

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist

  #dockerize start
  #      - name: Configure AWS credentials
  #        uses: aws-actions/configure-aws-credentials@v4
  #        with:
  #          role-to-assume: ${{ secrets.AWS_ROLE }}
  #          aws-region: ${{ env.AWS_REGION }}

  #      - name: Login to AWS ECR
  #        id: login-ecr
  #        uses: aws-actions/amazon-ecr-login@v2
  #
  #      - name: Build, tag, and push image to Amazon ECR
  #        env:
  #          NAME: ${{ steps.login-ecr.outputs.registry }}/${{ env.PROJECT_NAME }}
  #          TAG: ${{ github.sha }}
  #        run: |
  #          docker build -t $NAME:$TAG .
  #          docker push $NAME:$TAG
  #dockerize start

  deploy:
    name: Deploy
    if: github.ref == 'refs/heads/main'
    needs: build
    runs-on: ubuntu-latest
    concurrency: deploy

    permissions:
      id-token: write # This is required for aws oidc connection

    steps:
      - uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: Configure AWS credentials from AWS account
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy app to S3
        run: aws s3 sync dist/ s3://${{ env.BUCKET_NAME }} --delete

      - name: Invalidate CloudFront
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ secrets.UI_STUDIO_CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"
#dockerize start
#      - name: Login to AWS ECR
#        id: login-ecr
#        uses: aws-actions/amazon-ecr-login@v2

#      - name: Build, tag, and push image to Amazon ECR
#        env:
#          NAME: ${{ steps.login-ecr.outputs.registry }}/${{ env.PROJECT_NAME }}
#          TAG: ${{ github.sha }}
#        run: |
#          docker build -t $NAME:$TAG .
#          docker push $NAME:$TAG
#
#      - name: Set 'latest' tag for docker image
#        env:
#          NAME: ${{ steps.login-ecr.outputs.registry }}/${{ env.PROJECT_NAME }}
#          TAG: ${{ github.sha }}
#        run: |
#          docker tag $NAME:$TAG $NAME:latest
#          docker push $NAME:latest
#dockerize end
